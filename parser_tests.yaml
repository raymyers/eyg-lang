parser_tests:
  - name: "FunctionCallNoArgs"
    input: "foo({})"
    expected: "(call foo {})"

  - name: "FunctionCallOneArg"
    input: "foo(42)"
    expected: "(call foo 42.0)"

  - name: "FunctionCallMultipleArgs"
    input: "foo(1, 2, 3)"
    expected: "(call foo 1.0 2.0 3.0)"

  - name: "BuiltinCall"
    input: "!int_add(1, 2)"
    expected: "(call (builtin int_add) 1.0 2.0)"

  - name: "ChainedFunctionCalls"
    input: "foo({})(bar)"
    expected: "(call (call foo {}) bar)"
  - name: "Number"
    input: "42"
    expected: "42.0"

  - name: "String"
    input: '"hello"'
    expected: "hello"

  - name: "Boolean"
    input: "True({})"
    expected: "(union True {})"

  - name: "EmptyRecord"
    input: "{}"
    expected: "{}"

  - name: "Addition"
    input: "2 + 3"
    expected: "(+ 2.0 3.0)"

  - name: "Subtraction"
    input: "5 - 2"
    expected: "(- 5.0 2.0)"

  - name: "Multiplication"
    input: "4 * 6"
    expected: "(* 4.0 6.0)"

  - name: "Division"
    input: "8 / 2"
    expected: "(/ 8.0 2.0)"

  - name: "Comparison"
    input: "3 < 5"
    expected: "(< 3.0 5.0)"

  - name: "Equality"
    input: "1 == 1"
    expected: "(== 1.0 1.0)"

  - name: "Inequality"
    input: "1 != 2"
    expected: "(!= 1.0 2.0)"

  - name: "UnaryMinus"
    input: "-42"
    expected: "(- 42.0)"

  - name: "LogicalNot"
    input: "!True({})"
    expected: "(! (union True {}))"

  - name: "Grouping"
    input: "(2 + 3)"
    expected: "(group (+ 2.0 3.0))"

  - name: "ComplexExpression"
    input: "2 + 3 * 4"
    expected: "(+ 2.0 (* 3.0 4.0))"

  - name: "GroupedExpression"
    input: "(2 + 3) * 4"
    expected: "(* (group (+ 2.0 3.0)) 4.0)"

  - name: "NestedGrouping"
    input: "((1 + 2) * 3)"
    expected: "(group (* (group (+ 1.0 2.0)) 3.0))"

  - name: "MixedTypes"
    input: '"hello" == "world"'
    expected: "(== hello world)"

  - name: "FloatNumbers"
    input: "3.14 + 2.71"
    expected: "(+ 3.14 2.71)"

  - name: "Effect"
    input: 'perform Log("hello")'
    expected: '(perform Log hello)'

  - name: "SeqEffects"
    input: |
      _ = perform Log("a")
      perform Log("b")
    expected: '(let _ (perform Log a) (perform Log b))'

  - name: "Assignment"
    input: |
      world = 10
      world
    expected: '(let world 10.0 world)'

  # Chained assignments are no longer supported with the new Let structure
  # Each assignment must have its own body

  - name: "Block"
    input: |
      {
        perform Log("a")
        perform Log("b")
      }
    expected: '(block (perform Log a) (perform Log b))'
  - name: "Records"
    input: |
      {name: "Alice", age: 30}
    expected: '(record (field name Alice) (field age 30.0))'
  - name: "RecordAccess"
    input: |
      alice.name
    expected: '(access alice name)'
  - name: "List"
    input: |
      [1, 2, 3]
    expected: '(list 1.0 2.0 3.0)'
  - name: "ListSpread"
    input: |
      [0, ..items]
    expected: '(list 0.0 (spread items))'
  - name: "Match"
    input: |
      match value {
        Ok(x) -> x
        Error(_) -> 0
      }
    expected: '(match value (case (pattern Ok x) x) (case (pattern Error _) 0.0))'
  - name: "Lambda"
    input: |
      |x, y| { !int_add(x, y) }
    expected: '(lambda (args x y) (call (builtin int_add) x y))'
  - name: "NamedRef"
    input: |
      @std:1
    expected: '(named_ref std 1)'
  
  - name: "FixedPoint"
    input: |
      !fix(|loop, x| {
        match !int_less_than(x, 3) {
          True(_) -> loop(!int_add(x, 1))
          False(_) -> x
        }
      })
    expected: '(call (builtin fix) (lambda (args loop x) (match (call (builtin int_less_than) x 3.0) (case (pattern True _) (call loop (call (builtin int_add) x 1.0))) (case (pattern False _) x))))'
  
  - name: "Handle"
    input: |
      handle Alert(
        |value, resume| {
          resume({})
        },
        |_| { {} }
      )
    expected: '(handle Alert (lambda (args value resume) (call resume {})) (lambda (args _) {}))'
  - name: "Destructuring"
    input: |
      {food: f} = record
    expected: '(let (destructure (field food f)) record {})'
  - name: "Union"
    input: |
      Cat("felix")
    expected: '(union Cat felix)'
  - name: "EmptyThunk"
    input: |
      || {}
    expected: '(thunk {})'
  - name: "Handle"
    input: |
      handle Alert(
        |value, resume| { 1 },
        |_| { 1 }
      )
    expected: '(handle Alert (lambda (args value resume) 1.0) (lambda (args _) 1.0))'

  - name: "LetWithBody"
    input: |
      x = 5
      x + 10
    expected: '(let x 5.0 (+ x 10.0))'

  - name: "NestedLet"
    input: |
      x = 5
      y = x + 1
      x + y
    expected: '(let x 5.0 (let y (+ x 1.0) (+ x y)))'

  - name: "LetWithEmptyBody"
    input: |
      x = 42
      {}
    expected: '(let x 42.0 {})'